{"version":3,"sources":["config.js","BottomBar.js","App.js","serviceWorker.js","index.js"],"names":["proxy","window","location","hostname","useStyles","makeStyles","theme","appBar","bottom","top","inputContainer","backgroundColor","fade","palette","common","white","borderRadius","shape","marginLeft","spacing","position","width","icon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","padding","BottomBar","props","classes","AppBar","className","Toolbar","style","maxWidth","InputBase","onChange","handleName","value","name","placeholder","root","input","inputProps","onSubmit","handleSubmit","handleContent","content","App","state","chat","this","socket","io","on","msg","setState","reverse","scrollToBottom","event","target","console","log","preventDefault","emit","document","getElementById","scrollTop","scrollHeight","Paper","id","elevation","map","el","index","key","Typography","variant","bind","React","Component","Boolean","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00aeb411.chunk.js","sourcesContent":["import pkg from '../package.json';\r\n\r\nexport default {\r\n  development: {\r\n    endpoint: pkg.proxy\r\n  },\r\n  production: {\r\n    endpoint: window.location.hostname\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    bottom: 0,\r\n    top: 'auto',\r\n  },\r\n  inputContainer: {\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    borderRadius: theme.shape.borderRadius,\r\n    marginLeft: theme.spacing(1),\r\n    position: 'relative',\r\n    width: '100%',\r\n  },\r\n  icon: {\r\n    width: theme.spacing(7),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 7),\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nexport default function BottomBar(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar>\r\n        <div className={classes.inputContainer} style={{maxWidth: '200px'}}>\r\n          <div className={classes.icon}>\r\n            <FaceIcon />\r\n          </div>\r\n          <InputBase\r\n            onChange={props.handleName}\r\n            value={props.name}\r\n            placeholder=\"Name\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n              input: classes.inputInput,\r\n            }}\r\n            inputProps={{ 'aria-label': 'name' }}\r\n          />\r\n        </div>\r\n        <div className={classes.inputContainer}>\r\n          <form onSubmit={props.handleSubmit}>\r\n            <div className={classes.icon}>\r\n              <ChatIcon />\r\n            </div>\r\n            <InputBase\r\n              onChange={props.handleContent}\r\n              value={props.content}\r\n              placeholder=\"Type your message...\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'content' }}\r\n            />\r\n          </form>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}","import React from 'react';\nimport config from './config';\nimport io from 'socket.io-client';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport BottomBar from './BottomBar';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chat: [],\n      content: '',\n      name: '',\n    };\n  }\n\n  componentDidMount() {\n    this.socket = //io(config[process.env.NODE_ENV].endpoint);\n    this.socket = io(\"http://localhost:5000/\");\n\n    // Load the last 10 messages in the window.\n    this.socket.on('init', (msg) => {\n      this.setState((state) => ({\n        chat: [...state.chat, ...msg.reverse()],\n      }), this.scrollToBottom);\n    });\n\n    // Update the chat if a new message is broadcasted.\n    this.socket.on('push', (msg) => {\n      this.setState((state) => ({\n        chat: [...state.chat, msg],\n      }), this.scrollToBottom);\n    });\n  }\n\n  // Save the message the user is typing in the input field.\n  handleContent(event) {\n    this.setState({\n      content: event.target.value,\n    });\n  }\n\n  //\n  handleName(event) {\n    this.setState({\n      name: event.target.value,\n    });\n  }\n\n  // When the user is posting a new message.\n  handleSubmit(event) {\n    console.log(event);\n\n    // Prevent the form to reload the current page.\n    event.preventDefault();\n\n    this.setState((state) => {\n      console.log(state);\n      console.log('this', this.socket);\n      // Send the new message to the server.\n      this.socket.emit('message', {\n        name: state.name,\n        content: state.content,\n      });\n\n      // Update the chat with the user's message and remove the current message.\n      return {\n        chat: [...state.chat, {\n          name: state.name,\n          content: state.content,\n        }],\n        content: '',\n      };\n    }, this.scrollToBottom);\n  }\n\n  // Always make sure the window is scrolled down to the last message.\n  scrollToBottom() {\n    const chat = document.getElementById('chat');\n    chat.scrollTop = chat.scrollHeight;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Paper id=\"chat\" elevation={3}>\n          {this.state.chat.map((el, index) => {\n            return (\n              <div key={index}>\n                <Typography variant=\"caption\" className=\"name\">\n                  {el.name}\n                </Typography>\n                <Typography variant=\"body1\" className=\"content\">\n                  {el.content}\n                </Typography>\n              </div>\n            );\n          })}\n        </Paper>\n        <BottomBar\n          content={this.state.content}\n          handleContent={this.handleContent.bind(this)}\n          handleName={this.handleName.bind(this)}\n          handleSubmit={this.handleSubmit.bind(this)}\n          name={this.state.name}\n        />\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}